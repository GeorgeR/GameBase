#pragma once

#include "CoreMinimal.h"

#include "VulnerabilityInterface.generated.h"

UINTERFACE(MinimalAPI)
class UVulnerabilityInterface 
	: public UInterface
{
	GENERATED_BODY()
};

/* Mostly useful for AI, checks if a caller should actually this target based on what it's vulnerable to. */
class GAMEBASE_API IVulnerabilityInterface
{
	GENERATED_BODY()

public:
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "GameBase")
	uint8 GetEnemyVulnerability();

	template <typename T>
	T GetEnemyVulnerabilityAs();

	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "GameBase")
	uint8 GetFriendlyVulnerability();

	template <typename T>
	T GetFriendlyVulnerabilityAs();
};

template <typename T>
T IVulnerabilityInterface::GetEnemyVulnerabilityAs()
{
	return static_cast<T>(GetEnemyVulnerability());
}

template <typename T>
T IVulnerabilityInterface::GetFriendlyVulnerabilityAs()
{
	return static_cast<T>(GetFriendlyVulnerability());
}